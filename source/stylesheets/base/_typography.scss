@include establish-baseline;

@function map-fetch($map, $keys) {
	$key: nth($keys, 1);
	$length: length($keys);
	$value: map-get($map, $key);
	@if ($length > 1) {
		$rest: ();
		@for $i from 2 through $length {
			$rest: append($rest, nth($keys, $i))
		}
		@return map-fetch($value, $rest)
	} @else {
		@return $value;
	}
}

// Compass Vertical Rhythm setup 
$base-font-size: 16px;
$base-line-height: 26px;
$rhythm-unit: "rem";
$rem-with-px-fallback: true;

html, body {
    font-size: 16px;
    font-family: $font-family;
    background-color: #000;
}

@media #{$medium-up} {
	html, body {
		font-size: 18px;
	}
}

// The type-scale Map contains the whole type scale.
// Add your own sizes or modify these, they will be available in the type-scale mixin for use.

$type-prefix: "t-";
$type-scale: (
    tiny: (
        font-size: 14px,
        base-lines: 0.5
    ),
    small: (
        font-size: 15px,
        base-lines: 0.75
    ),
    base: (
        font-size: $base-font-size,
        base-lines: 1
    ),
    medium: (
        font-size: 20px,
        base-lines: 1
    ),
    large: (
        font-size: 26px,
        base-lines: 1.5
    ),
    xlarge: (
        font-size: 30px,
        base-lines: 1.5
    ),
    xxlarge: (
        font-size: 40px,
        base-lines: 2
    )
);

$type-weight: (
    thin: 100,
    light: 200,
    regular: 300,
    bold: 600,
    black: 700
);

// A type scaling utility $type-scale map with the predefined values

 // Each loop that outputs all of the type scales as placeholders with their type-prefix
 // ex. %t-tiny, %t-small
@each $scale in map-keys($type-scale) {
    %#{$type-prefix}#{$scale} {
        @include adjust-font-size-to (
            map-fetch($type-scale, $scale font-size),   
            map-fetch($type-scale, $scale base-lines)
        );
    }
}

// A mixin for using type scale
// Parameters: 
// $scale (tiny, small...) 
// $extend (boolean) - true by default, if needed inside media query use false to @include the content instead of @extend
// ex. @include type-scale(small) or @include type-scale(small, false) for use inside media queries. 

@mixin type-scale($scale, $extend: true, $map: $type-scale) {
    @if $extend {
        @extend %#{$type-prefix}#{$scale};
    }
    @else {
        @include adjust-font-size-to(
            map-fetch($map, $scale font-size),
            map-fetch($map, $scale base-lines)
        );
    }
}

// A simple type-weight mixin
// ex. @include type-weight(strong);
@mixin type-weight($weight) {
    font-weight: map-get($type-weight, $weight);
}

// A quick ligature mixin, to be updated with a more modular one
@mixin type-ligatures() {
    -moz-font-feature-settings: "liga=1, dlig=1";
    -ms-font-feature-settings: "liga", "dlig";
    -webkit-font-feature-settings: "liga", "dlig";
    -o-font-feature-settings: "liga", "dlig";
    font-feature-settings: "liga", "dlig";
}

// Headings
#{h1, h2, h3, h4, h5, h6} {
    font-family: $base-font-family;
    margin-top: 0;
    @include type-weight(regular);
    @include margin-trailer(1);
    @include type-ligatures;
}
h1, .alpha {
    @include type-scale(xxlarge);
}
h2, .beta {
    @include type-scale(xlarge);
}
h3, .gamma {
    @include type-scale(large);
}
h4, .delta {
    @include type-scale(medium);
}
h5, .epsilon {
    @include type-scale(base);
}
h5, .zeta {
    @include type-scale(tiny);
}

// Paragraphs
p {
    @include margin-trailer(1);
    // @include word-break(break-word);
    // @include hyphens(auto);
    @include type-ligatures;
    @include type-weight(thin);
    font-family: $font-family;
    
}

// Small
small {
    @include type-scale(small);
}

a {
	color: $primary-color;
    text-decoration: none;
}

blockquote {
	
	p {

	}
}

ul, ul li ul {
    list-style: none;
    margin: 0;
}

.serif {
	font-family:$font-family;
}

.sans {
	font-family:$sans-font-family;
}

.large {
    @include type-scale(large);
}

.medium {
    @include type-scale(medium);
}

.base {
    @include type-scale(base);
}

.normal {

}

.caps {
	text-transform: uppercase;
}

.light {

}

.no-margin {

}

.rhythm {
    @include margin-trailer(1);
}

.h-sub {
    color: $primary-color;
}

%small-text {
	font-family: $sans-font-family;
	color: #999;
}

%small-link {
	color: $primary-color;
	text-transform: uppercase;
}	

%post-text {
	font-family: $sans-font-family;
	color: #656868;	
}

.two-column {
    @media #{$medium-up} {
        -moz-column-count: 2;
        -moz-column-gap: 50px;
        -webkit-column-count: 2;
        -webkit-column-gap: 50px;

        p, ul {
            -webkit-column-break-inside: avoid;
            -moz-column-break-inside: avoid;
            -moz-page-break-inside: avoid;
            page-break-inside: avoid;
        }
    }
}

.tinted {
    #{h1, h2, h3, h4, h5, h6} {
        color: #fff;
    }
}